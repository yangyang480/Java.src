#1 return all orders made by users with the first name of “Marion”
SELECT 
O.ORDER_ID, 
O.USER_ID,
O.STORE_ID
FROM ORDERS O
LEFT JOIN USERS U ON O.USER_ID = U.USER_ID
WHERE U.FIRSt_NAME = 'Marion';

#2 select all users that have not made an order
SELECT 
U.USER_ID,
U.FIRST_NAME, 
U.LAST_NAME,
U.CITY
FROM USERS U
LEFT JOIN ORDERS O ON U.USER_ID = O.USER_ID
WHERE O.ORDER_ID IS NULL;

#3 select the names and prices of all items that have been part of 2 or more separate orders
SELECT i.NAME, i.PRICE 
FROM items i
LEFT JOIN order_items oi ON i.ITEM_ID = oi.ITEM_ID 
LEFT JOIN orders o ON oi.ORDER_ID = o.ORDER_ID 
GROUP BY i.NAME
HAVING COUNT(o.ORDER_ID) > 1;

#4 return the Order Id, Item name, Item Price, and Quantity from orders made at stores in the city “New York"
SELECT 
O.ORDER_ID, 
I.NAME,
I.PRICE,
O.QUANTITY
FROM ITEMS I
LEFT JOIN ORDER_ITEMS O ON I.ITEM_ID = O.ITEM_ID
LEFT JOIN ORDERS D ON O.ORDER_ID = D.ORDER_ID
LEFT JOIN STORES S ON D.STORE_ID = S.STORE_ID
WHERE S.CITY = 'New York'
ORDER BY O.ORDER_ID ASC;

#5 calculates the total revenue generated by each item
SELECT 
i.NAME AS 'ITEM_NAME', 
(i.PRICE * SUM(oi.QUANTITY)) AS 'REVENUE'
FROM items i
INNER JOIN order_items oi ON i.ITEM_ID = oi.ITEM_ID
GROUP BY oi.ITEM_ID
ORDER BY REVENUE DESC; 


#6 
SELECT 
s.NAME AS 'Store Name',
COUNT(*) AS 'Order Quantity',
CASE 
	WHEN COUNT(*) > 3 THEN 'High'
	WHEN COUNT(*) > 1 THEN 'Medium'
	ELSE 'Low'
END AS 'Sales Figure'
FROM stores s
LEFT JOIN orders o ON s.STORE_ID = o.STORE_ID 
GROUP BY s.NAME
ORDER BY COUNT(*) DESC;



